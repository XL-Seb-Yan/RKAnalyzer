{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0747ce1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to JupyROOT 6.30/02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-01-30 22:40:38.770955: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n"
     ]
    }
   ],
   "source": [
    "import xgboost as xgb\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import uproot\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import ROOT\n",
    "from ROOT import TFile, TH1F, TCanvas, TMath,TLine, TH1, TLegend\n",
    "import copy\n",
    "import array\n",
    "ROOT.gStyle.SetOptStat(0)\n",
    "ROOT.disableJSVis()\n",
    "ROOT.gStyle.SetPadTickX(1)\n",
    "ROOT.gStyle.SetPadTickY(1)\n",
    "ROOT.gStyle.SetOptStat(0)\n",
    "ROOT.gStyle.SetBarWidth(1);\n",
    "ROOT.gStyle.SetHistLineWidth(1);\n",
    "import sys\n",
    "sys.path.append(\"/eos/home-x/xuyan/TrijetProj/TrijetAna_Main/ZprimeAna/utiles\")\n",
    "from CMSStyle import CMS_lumi\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "88beb267",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "flat_tree = uproot.open(\"oldfile/Tree_KEE_lowq2.root\")['Events']\n",
    "df_KEE = flat_tree.arrays(library='pd')\n",
    "flat_tree = uproot.open(\"oldfile/Tree_K0StarEE_lowq2.root\")['Events']\n",
    "df_K0StarEE = flat_tree.arrays(library='pd')\n",
    "\n",
    "num_rows, num_columns = df_KEE.shape\n",
    "df_KEE[\"label\"] = np.ones(num_rows)\n",
    "num_rows, num_columns = df_K0StarEE.shape\n",
    "df_K0StarEE[\"label\"] = np.zeros(num_rows)\n",
    "\n",
    "df = pd.concat([df_KEE, df_K0StarEE], axis = 0)\n",
    "# print(df)\n",
    "df.replace([np.inf, -np.inf], np.nan, inplace=True)\n",
    "df = df.dropna()\n",
    "\n",
    "X = df.drop(columns=[\"label\"])\n",
    "y = df[\"label\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d9ba0937",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Define the DMatrix\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "# Set parameters for XGBoost\n",
    "params = {\n",
    "    'max_depth': 4,\n",
    "    'eta': 0.1,\n",
    "    'objective': 'binary:logistic',\n",
    "    'eval_metric': 'auc'\n",
    "}\n",
    "\n",
    "# Train the model\n",
    "num_round = 100\n",
    "bst = xgb.train(params, dtrain, num_round)\n",
    "\n",
    "# Make predictions\n",
    "# dtrain = dtest\n",
    "train_scores = bst.predict(dtrain, output_margin=True)\n",
    "\n",
    "# Convert the DMatrix back to DataFrame\n",
    "df_train = pd.DataFrame(dtrain.get_label(), columns=['label'])\n",
    "df_train['score'] = train_scores\n",
    "\n",
    "# Segment scores based on label\n",
    "scores_label_0 = df_train[df_train['label'] == 0]['score']\n",
    "scores_label_1 = df_train[df_train['label'] == 1]['score']\n",
    "\n",
    "# Plotting distributions\n",
    "plt.hist(scores_label_0, bins=30, density=False, alpha=0.7, label='Label 0', \n",
    "         edgecolor='blue', linewidth=1.5, facecolor='none')\n",
    "plt.hist(scores_label_1, bins=30, density=False, alpha=0.7, label='Label 1', \n",
    "         edgecolor='red', linewidth=1.5, facecolor='none')\n",
    "\n",
    "plt.xlabel('Score')\n",
    "plt.ylabel('Density')\n",
    "plt.title('Normalized Distribution of Training Output Scores by Label')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8b3be3a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1197/1197 [==============================] - 4s 2ms/step - loss: 0.5548 - accuracy: 0.7629 - val_loss: 0.5158 - val_accuracy: 0.7646\n",
      "Epoch 2/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.5125 - accuracy: 0.7699 - val_loss: 0.5052 - val_accuracy: 0.7703\n",
      "Epoch 3/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.5072 - accuracy: 0.7705 - val_loss: 0.5079 - val_accuracy: 0.7767\n",
      "Epoch 4/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.5015 - accuracy: 0.7716 - val_loss: 0.5092 - val_accuracy: 0.7766\n",
      "Epoch 5/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4978 - accuracy: 0.7734 - val_loss: 0.4923 - val_accuracy: 0.7741\n",
      "Epoch 6/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4947 - accuracy: 0.7715 - val_loss: 0.5169 - val_accuracy: 0.7608\n",
      "Epoch 7/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4923 - accuracy: 0.7727 - val_loss: 0.4959 - val_accuracy: 0.7721\n",
      "Epoch 8/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4910 - accuracy: 0.7734 - val_loss: 0.4928 - val_accuracy: 0.7757\n",
      "Epoch 9/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4892 - accuracy: 0.7741 - val_loss: 0.4876 - val_accuracy: 0.7757\n",
      "Epoch 10/10\n",
      "1197/1197 [==============================] - 3s 2ms/step - loss: 0.4876 - accuracy: 0.7749 - val_loss: 0.5034 - val_accuracy: 0.7641\n",
      "300/300 [==============================] - 0s 1ms/step - loss: 0.5034 - accuracy: 0.7641\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.5034033060073853, 0.7641036510467529]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = tf.keras.models.Sequential([\n",
    "    tf.keras.layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)),\n",
    "    tf.keras.layers.Dense(64, activation='relu'),\n",
    "    tf.keras.layers.Dense(1, activation='sigmoid')\n",
    "])\n",
    "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
    "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))\n",
    "model.evaluate(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4db49daa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
